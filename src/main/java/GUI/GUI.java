/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

/**
 *
 * @author morve
 */
public class GUI extends javax.swing.JFrame {
    
    // Variables to store user inputs
    String to_currency;
    String from_currency;
    double currency_amount;
    
    // Create new object to run methods for conversion
    Functions myFunctions = new Functions();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        jComboBox2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "United Arab Emirates (AED)", "Argentine Peso (ARS)", "Australian Dollar (AUD)", "Brazilian Real (BRL)", "Bahamian Dollar (BSD)", "Swizz Franc (CHF)", "Chinese Yuan (CNY)", "Costa Rican Colon (CRC)", "Cuban Peso (CUP)", "Danish Krone (DKK)", "Dominican Peso (DOP)", "EURO (EUR)", "Hong Kong Dollar (HKD)", "Indonesian Rupiah (IDR)", "Indian Rupee (INR)", "Jamaican Dollar (JMD)", "Japanese Yen (JPY)", "South Korean Won (KRW)", "Kuwaiti Dinar (KWD)", "Sri Lankan Rupee (LKR)", "Moroccan Dirham (MAD)", "Macau Pataca (MOP)", "Mexican Peso (MXN)", "Malaysian Ringgit (MYR)", "Nigerian Naira (NGN)", "Norweigan Kroner (NOK)", "New Zealand Dollar (NZD)", "Philippine Peso (PHP)", "Pakistani Rupee (PKR)", "Qatari Rial (QAR)", "Russian Rouble (RUB)", "Saudi Riyal (SAR)", "Swedish Krona (SEK)", "Singapore Dollar (SGD)", "Thai Baht (THB)", "Taiwan Dollar (TWD)", "United States Dollar (USD)", "Vietnamese Dong (VND)", "South African Rand (ZAR)" }));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Original:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel7.setText("Original:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setText("Currency Converter");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canadian Dollar (CAD)", "United Arab Emirates Dirham (AED)", "Argentine Peso (ARS)", "Australian Dollar (AUD)", "Brazilian Real (BRL)", "Bahamian Dollar (BSD)", "Swiss Franc (CHF)", "Chinese Yuan (CNY)", "Costa Rican Colon (CRC)", "Cuban Peso (CUP)", "Danish Krone (DKK)", "Dominican Peso (DOP)", "EURO (EUR)", "Hong Kong Dollar (HKD)", "Indonesian Rupiah (IDR)", "Indian Rupee (INR)", "Jamaican Dollar (JMD)", "Japanese Yen (JPY)", "South Korean Won (KRW)", "Kuwaiti Dinar (KWD)", "Sri Lankan Rupee (LKR)", "Moroccan Dirham (MAD)", "Macau Pataca (MOP)", "Mexican Peso (MXN)", "Malaysian Ringgit (MYR)", "Nigerian Naira (NGN)", "Norweigan Kroner (NOK)", "New Zealand Dollar (NZD)", "Philippine Peso (PHP)", "Pakistani Rupee (PKR)", "Qatari Rial (QAR)", "Russian Rouble (RUB)", "Saudi Riyal (SAR)", "Swedish Krona (SEK)", "Singapore Dollar (SGD)", "Thai Baht (THB)", "Taiwan Dollar (TWD)", "United States Dollar (USD)", "Vietnamese Dong (VND)", "South African Rand (ZAR)" }));

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Original:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Converted:");

        jTextField2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canadian Dollar (CAD)", "United Arab Emirates Dirham (AED)", "Argentine Peso (ARS)", "Australian Dollar (AUD)", "Brazilian Real (BRL)", "Bahamian Dollar (BSD)", "Swiss Franc (CHF)", "Chinese Yuan (CNY)", "Costa Rican Colon (CRC)", "Cuban Peso (CUP)", "Danish Krone (DKK)", "Dominican Peso (DOP)", "EURO (EUR)", "Hong Kong Dollar (HKD)", "Indonesian Rupiah (IDR)", "Indian Rupee (INR)", "Jamaican Dollar (JMD)", "Japanese Yen (JPY)", "South Korean Won (KRW)", "Kuwaiti Dinar (KWD)", "Sri Lankan Rupee (LKR)", "Moroccan Dirham (MAD)", "Macau Pataca (MOP)", "Mexican Peso (MXN)", "Malaysian Ringgit (MYR)", "Nigerian Naira (NGN)", "Norweigan Kroner (NOK)", "New Zealand Dollar (NZD)", "Philippine Peso (PHP)", "Pakistani Rupee (PKR)", "Qatari Rial (QAR)", "Russian Rouble (RUB)", "Saudi Riyal (SAR)", "Swedish Krona (SEK)", "Singapore Dollar (SGD)", "Thai Baht (THB)", "Taiwan Dollar (TWD)", "United States Dollar (USD)", "Vietnamese Dong (VND)", "South African Rand (ZAR)" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("Original:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("Converted:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setText("Fun Fact 1:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel9.setText("Fun Fact 2:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    // Convert button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        // Takes original currency code
        
        // Switch does not support selector type object
        
        // Combo box 1
        if (jComboBox1.getSelectedItem().equals("Canadian Dollar (CAD)")){
            from_currency = "CAD";
            jTextArea1.setText("Canadian Dollar is used only in Canada");
        }
        else if(jComboBox1.getSelectedItem().equals("United States Dollar (USD)")){
                from_currency = "USD";
                jTextArea1.setText("United States Dollar is used in United States, Ecuador, Puerto Rico, "
                        + "Zimbabwe, El Salvador, Panama, Somalia, Guam, Turks and Calcos Islands, U.S. Virgin "
                        + "Islands, Timor-Leste, Palau, Marshall Islands, Micronesia, British Virgin Islands, "
                        + "American Samoa, Bonaire, and Northern Mariana Islands");
        }
        else if(jComboBox1.getSelectedItem().equals("EURO (EUR)")){
                from_currency = "EUR";
                jTextArea1.setText("EURO is used in Germany, Italy, Spain, France, Portugal, Austria, Belgium, Netherlands, "
                        + "Greece, Ireland, Finland, Slovakia, Lithuania, Malta, Cyprus, Monaco, Luxembourg, Kosovo, "
                        + "Montenegro, Vatican City, Estonia, Slovenia, Latvia, Andorra, and San Morino");
        }
        else if(jComboBox1.getSelectedItem().equals("Chinese Yuan (CNY)")){
                from_currency = "CNY";
                jTextArea1.setText("Chinese Yuan is only used in China");
        }
        else if(jComboBox1.getSelectedItem().equals("Japanese Yen (JPY)")){
                from_currency = "JPY";
                jTextArea1.setText("Japanese Yen is only used in Japan");
        }    
        else if(jComboBox1.getSelectedItem().equals("South Korean Won (KRW)")){
                from_currency = "KRW";
                jTextArea1.setText("South Korea Won is only used in South Korea");
        }
        else if(jComboBox1.getSelectedItem().equals("United Arab Emirates Dirham (AED)")){
                from_currency = "AED";
                jTextArea1.setText("United Arab Emirates Dirham is only used in the United Arab Emirates");
        }
        else if(jComboBox1.getSelectedItem().equals("Argentine Peso (ARS)")){
                from_currency = "ARS";
                jTextArea1.setText("Argentine Peso is only used in Argentina");
        }
        else if(jComboBox1.getSelectedItem().equals("Australian Dollar (AUD)")){
                from_currency = "AUD";
                jTextArea1.setText("Australian Dollar is used in Australia, Tuvalu, Nauru, Kiribati, Christmas Islands, "
                        + "Norfolk Island and Cocos Islands");
        }
        else if(jComboBox1.getSelectedItem().equals("Brazilian Real (BRL)")){
                from_currency = "BRL";
                jTextArea1.setText("Brazilia Real is only used in Brazil");
        }
        else if(jComboBox1.getSelectedItem().equals("Bahamian Dollar (BSD)")){
                from_currency = "BSD";
                jTextArea1.setText("Bahamian Dollar is only used in The Bahamas");
        }
        else if(jComboBox1.getSelectedItem().equals("Swiss Franc (CHF)")){
                from_currency = "CHF";
                jTextArea1.setText("Swiss Franc is used in Switzerland and Liechtenstein");
        }
        else if(jComboBox1.getSelectedItem().equals("Costa Rican Colon (CRC)")){
                from_currency = "CRC";
                jTextArea1.setText("Costa Rican Colon is only used in Costa Rica");
        }
        else if(jComboBox1.getSelectedItem().equals("Cuban Peso (CUP)")){
                from_currency = "CUP";
                jTextArea1.setText("Cuban Peso is only used in Cuba");
        }
        else if(jComboBox1.getSelectedItem().equals("Danish Krone (DKK)")){
                from_currency = "DKK";
                jTextArea1.setText("Danish Krone is used in Denmark, Greenland, and Faroe Islands");
        }
        else if(jComboBox1.getSelectedItem().equals("Dominican Peso (DOP)")){
                from_currency = "DOP";
                jTextArea1.setText("Dominican Peso is only used in The Dominican Republic");
        }
        else if(jComboBox1.getSelectedItem().equals("Hong Kong Dollar (HKD)")){
                from_currency = "HKD";
                jTextArea1.setText("Hong Kong Dollar is only used in Hong Kong");
        }
        else if(jComboBox1.getSelectedItem().equals("Indonesian Rupiah (IDR)")){
                from_currency = "IDR";
                jTextArea1.setText("Indonesian Rupiah is only used in Indonesia");
        }
        else if(jComboBox1.getSelectedItem().equals("Indian Rupee (INR)")){
                from_currency = "INR";
                jTextArea1.setText("Indian Rupee is used in India and Bhutan");
        }
        else if(jComboBox1.getSelectedItem().equals("Jamaican Dollar (JMD)")){
                from_currency = "JMD";
                jTextArea1.setText("Jamaican Dollar is only used in Jamaica");
        }
        else if(jComboBox1.getSelectedItem().equals("Kuwaiti Dinar (KWD)")){
                from_currency = "KWD";
                jTextArea1.setText("Kuwaiti Dinar is only used in Kuwait");
        }
        else if(jComboBox1.getSelectedItem().equals("Sri Lankan Rupee (LKR)")){
                from_currency = "LKR";
                jTextArea1.setText("Sri Lankan Rupee is only used in Sri Lanka");
        }
        else if(jComboBox1.getSelectedItem().equals("Moroccan Dirham (MAD)")){
                from_currency = "MAD";
                jTextArea1.setText("Moroccan Dirham is used in Morocco and the Western Sahara");
        }
        else if(jComboBox1.getSelectedItem().equals("Macau Pataca (MOP)")){
                from_currency = "MOP";
                jTextArea1.setText("Macau Pataca is only used in Macau");
        }
        else if(jComboBox1.getSelectedItem().equals("Mexican Peso (MXN)")){
                from_currency = "MXN";
                jTextArea1.setText("Mexican Peso is only used in Mexico");
        }
        else if(jComboBox1.getSelectedItem().equals("Malaysian Ringgit (MYR)")){
                from_currency = "MYR";
                jTextArea1.setText("Malaysian Ringgit is only used in Malaysia");
        }
        else if(jComboBox1.getSelectedItem().equals("Nigerian Naira (NGN)")){
                from_currency = "NGN";
                jTextArea1.setText("Nigerian Naira is only used in the Federal Republic of Nigeria");
        }
        else if(jComboBox1.getSelectedItem().equals("Norweigan Kroner (NOK)")){
                from_currency = "NOK";
                jTextArea1.setText("Norweigan Kroner is used only in Norway");
        }
        else if(jComboBox1.getSelectedItem().equals("New Zealand Dollar (NZD)")){
                from_currency = "NZD";
                jTextArea1.setText("New Zealand Dollar is used in New Zealand, Cook Islands, Niue, Pitcairn Islands, and"
                        + "Tokelau");
        }
        else if(jComboBox1.getSelectedItem().equals("Philippine Peso (PHP)")){
                from_currency = "PHP";
                jTextArea1.setText("Philippine Peso is only used in the Philippines");
        }
        else if(jComboBox1.getSelectedItem().equals("Pakistani Rupee (PKR)")){
                from_currency = "PKR";
                jTextArea1.setText("Pakistani Rupee is only used in Pakistan"); 
        }
        else if(jComboBox1.getSelectedItem().equals("Qatari Rial (QAR)")){
                from_currency = "QAR";
                jTextArea1.setText("Qatari Rial is only used in Qatar");
        }
        else if(jComboBox1.getSelectedItem().equals("Russian Rouble (RUB)")){
                from_currency = "RUB";
                jTextArea1.setText("Russian Rouble is used in Russia, South Ossetia, and Abkhazia");
        }
        else if(jComboBox1.getSelectedItem().equals("Saudi Riyal (SAR)")){
                from_currency = "SAR";
                jTextArea1.setText("Saudi Riyal is only used in Saudi Arabia");
        }
        else if(jComboBox1.getSelectedItem().equals("Swedish Krona (SEK)")){
                from_currency = "SEK";
                jTextArea1.setText("Swedish Krona is only used in Sweden");
        }
        else if(jComboBox1.getSelectedItem().equals("Singapore Dollar (SGD)")){
                from_currency = "SGD";
                jTextArea1.setText("Singapore Dollar is only used in Singapore");
        }
        else if(jComboBox1.getSelectedItem().equals("Thai Baht (THB)")){
                from_currency = "THB";
                jTextArea1.setText("Thai Baht is only used in Thailand");
        }
        else if(jComboBox1.getSelectedItem().equals("Taiwan Dollar (TWD)")){
                from_currency = "TWD";
                jTextArea1.setText("Taiwan DOllar is only used in Taiwan");
        }
        else if(jComboBox1.getSelectedItem().equals("Vietnamese Dong (VND)")){
                from_currency = "VND";
                jTextArea1.setText("Vietnamese Dong is only used in Vietnam");
        }
        else if(jComboBox1.getSelectedItem().equals("South African Rand (ZAR)")){
                from_currency = "ZAR";
                jTextArea1.setText("South African Rand is only used South Africa, Eswatini, and Namibia");
        }
        
        // Takes currency to be converted code
        
        // Combo box 2
        if(jComboBox3.getSelectedItem().equals("Canadian Dollar (CAD)")){
            to_currency = "CAD";
            jTextArea2.setText("Canadian Dollar is used only in Canada");
        }
        else if(jComboBox3.getSelectedItem().equals("United States Dollar (USD)")){
                to_currency = "USD";
                jTextArea2.setText("United States Dollar is used in United States, Ecuador, Puerto Rico, "
                        + "Zimbabwe, El Salvador, Panama, Somalia, Guam, Turks and Calcos Islands, U.S. Virgin "
                        + "Islands, Timor-Leste, Palau, Marshall Islands, Micronesia, British Virgin Islands, "
                        + "American Samoa, Bonaire, and Northern Mariana Islands");
        }
        else if(jComboBox3.getSelectedItem().equals("EURO (EUR)")){
                to_currency = "EUR";
                jTextArea2.setText("EURO is used in Germany, Italy, Spain, France, Portugal, Austria, Belgium, Netherlands, "
                        + "Greece, Ireland, Finland, Slovakia, Lithuania, Malta, Cyprus, Monaco, Luxembourg, Kosovo, "
                        + "Montenegro, Vatican City, Estonia, Slovenia, Latvia, Andorra, and San Morino");
        }
        else if(jComboBox3.getSelectedItem().equals("Chinese Yuan (CNY)")){
                to_currency = "CNY";
                jTextArea2.setText("Chinese Yuan is only used in China");
        }
        else if(jComboBox3.getSelectedItem().equals("Japanese Yen (JPY)")){
                to_currency = "JPY";
                jTextArea2.setText("Japanese Yen is only used in Japan");
        }    
        else if(jComboBox3.getSelectedItem().equals("South Korean Won (KRW)")){
                to_currency = "KRW";
                jTextArea2.setText("South Korea Won is only used in South Korea");
        }
        else if(jComboBox3.getSelectedItem().equals("United Arab Emirates Dirham (AED)")){
                to_currency = "AED";
                jTextArea2.setText("United Arab Emirates Dirham is only used in the United Arab Emirates");
        }
        else if(jComboBox3.getSelectedItem().equals("Argentine Peso (ARS)")){
                to_currency = "ARS";
                jTextArea2.setText("Argentine Peso is only used in Argentina");
        }
        else if(jComboBox3.getSelectedItem().equals("Australian Dollar (AUD)")){
                to_currency = "AUD";
                jTextArea2.setText("Australian Dollar is used in Australia, Tuvalu, Nauru, Kiribati, Christmas Islands, "
                        + "Norfolk Island and Cocos Islands");
        }
        else if(jComboBox3.getSelectedItem().equals("Brazilian Real (BRL)")){
                to_currency = "BRL";
                jTextArea2.setText("Brazilia Real is only used in Brazil");
        }
        else if(jComboBox3.getSelectedItem().equals("Bahamian Dollar (BSD)")){
                to_currency = "BSD";
                jTextArea2.setText("Bahamian Dollar is only used in The Bahamas");
        }
        else if(jComboBox3.getSelectedItem().equals("Swiss Franc (CHF)")){
                to_currency = "CHF";
                jTextArea2.setText("Swiss Franc is used in Switzerland and Liechtenstein");
        }
        else if(jComboBox3.getSelectedItem().equals("Costa Rican Colon (CRC)")){
                to_currency = "CRC";
                jTextArea2.setText("Costa Rican Colon is only used in Costa Rica");
        }
        else if(jComboBox3.getSelectedItem().equals("Cuban Peso (CUP)")){
                to_currency = "CUP";
                jTextArea2.setText("Cuban Peso is only used in Cuba");
        }
        else if(jComboBox3.getSelectedItem().equals("Danish Krone (DKK)")){
                to_currency = "DKK";
                jTextArea2.setText("Danish Krone is used in Denmark, Greenland, and Faroe Islands");
        }
        else if(jComboBox3.getSelectedItem().equals("Dominican Peso (DOP)")){
                to_currency = "DOP";
                jTextArea2.setText("Dominican Peso is only used in The Dominican Republic");
        }
        else if(jComboBox3.getSelectedItem().equals("Hong Kong Dollar (HKD)")){
                to_currency = "HKD";
                jTextArea2.setText("Hong Kong Dollar is only used in Hong Kong");
        }
        else if(jComboBox3.getSelectedItem().equals("Indonesian Rupiah (IDR)")){
                to_currency = "IDR";
                jTextArea2.setText("Indonesian Rupiah is only used in Indonesia");
        }
        else if(jComboBox3.getSelectedItem().equals("Indian Rupee (INR)")){
                to_currency = "INR";
                jTextArea2.setText("Indian Rupee is used in India and Bhutan");
        }
        else if(jComboBox3.getSelectedItem().equals("Jamaican Dollar (JMD)")){
                to_currency = "JMD";
                jTextArea2.setText("Jamaican Dollar is only used in Jamaica");
        }
        else if(jComboBox3.getSelectedItem().equals("Kuwaiti Dinar (KWD)")){
                to_currency = "KWD";
                jTextArea2.setText("Kuwaiti Dinar is only used in Kuwait");
        }
        else if(jComboBox3.getSelectedItem().equals("Sri Lankan Rupee (LKR)")){
                to_currency = "LKR";
                jTextArea2.setText("Sri Lankan Rupee is only used in Sri Lanka");
        }
        else if(jComboBox3.getSelectedItem().equals("Moroccan Dirham (MAD)")){
                to_currency = "MAD";
                jTextArea2.setText("Moroccan Dirham is used in Morocco and the Western Sahara");
        }
        else if(jComboBox3.getSelectedItem().equals("Macau Pataca (MOP)")){
                to_currency = "MOP";
                jTextArea2.setText("Macau Pataca is only used in Macau");
        }
        else if(jComboBox3.getSelectedItem().equals("Mexican Peso (MXN)")){
                to_currency = "MXN";
                jTextArea2.setText("Mexican Peso is only used in Mexico");
        }
        else if(jComboBox3.getSelectedItem().equals("Malaysian Ringgit (MYR)")){
                to_currency = "MYR";
                jTextArea2.setText("Malaysian Ringgit is only used in Malaysia");
        }
        else if(jComboBox3.getSelectedItem().equals("Nigerian Naira (NGN)")){
                to_currency = "NGN";
                jTextArea2.setText("Nigerian Naira is only used in the Federal Republic of Nigeria");
        }
        else if(jComboBox3.getSelectedItem().equals("Norweigan Kroner (NOK)")){
                to_currency = "NOK";
                jTextArea2.setText("Norweigan Kroner is used only in Norway");
        }
        else if(jComboBox3.getSelectedItem().equals("New Zealand Dollar (NZD)")){
                to_currency = "NZD";
                jTextArea2.setText("New Zealand Dollar is used in New Zealand, Cook Islands, Niue, Pitcairn Islands, and"
                        + "Tokelau");
        }
        else if(jComboBox3.getSelectedItem().equals("Philippine Peso (PHP)")){
                to_currency = "PHP";
                jTextArea2.setText("Philippine Peso is only used in the Philippines");
        }
        else if(jComboBox3.getSelectedItem().equals("Pakistani Rupee (PKR)")){
                to_currency = "PKR";
                jTextArea2.setText("Pakistani Rupee is only used in Pakistan");
        }
        else if(jComboBox3.getSelectedItem().equals("Qatari Rial (QAR)")){
                to_currency = "QAR";
                jTextArea2.setText("Qatari Rial is only used in Qatar");
        }
        else if(jComboBox3.getSelectedItem().equals("Russian Rouble (RUB)")){
                to_currency = "RUB";
                jTextArea2.setText("Russian Rouble is used in Russia, South Ossetia, and Abkhazia");
        }
        else if(jComboBox3.getSelectedItem().equals("Saudi Riyal (SAR)")){
                to_currency = "SAR";
                jTextArea2.setText("Saudi Riyal is only used in Saudi Arabia");
        }
        else if(jComboBox3.getSelectedItem().equals("Swedish Krona (SEK)")){
                to_currency = "SEK";
                jTextArea2.setText("Swedish Krona is only used in Sweden");
        }
        else if(jComboBox3.getSelectedItem().equals("Singapore Dollar (SGD)")){
                to_currency = "SGD";
                jTextArea2.setText("Singapore Dollar is only used in Singapore");
        }
        else if(jComboBox3.getSelectedItem().equals("Thai Baht (THB)")){
                to_currency = "THB";
                jTextArea2.setText("Thai Baht is only used in Thailand");
        }
        else if(jComboBox3.getSelectedItem().equals("Taiwan Dollar (TWD)")){
                to_currency = "TWD";
                jTextArea2.setText("Taiwan Dollar is only used in Taiwan");
        }
        else if(jComboBox3.getSelectedItem().equals("Vietnamese Dong (VND)")){
                to_currency = "VND";
                jTextArea2.setText("Vietnamese Dong is only used in Vietnam");
        }
        else if(jComboBox3.getSelectedItem().equals("South African Rand (ZAR)")){
                to_currency = "ZAR";
                jTextArea2.setText("South African Rand is only used South Africa, Eswatini, and Namibia");
        }
        
        // Takes amount to be converted
        currency_amount = Double.parseDouble(jTextField1.getText());
        
        // Runs convert method
        double converted_amount = myFunctions.convert(currency_amount, to_currency, from_currency);
        
        // Sets text field to converted value
        jTextField2.setText(String.valueOf(converted_amount));
    }//GEN-LAST:event_jButton1ActionPerformed

    // Reset text button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("");
        jTextField2.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    // Exit application button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
